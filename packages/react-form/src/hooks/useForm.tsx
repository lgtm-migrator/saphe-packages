import React, {
  DependencyList,
  ReactElement,
  useCallback,
  useState,
} from 'react';
import Form from '../components/Form';
import { FieldPack, Fields, FormValues } from '../utils/helperTypes';
import { ValidationMode } from '../utils/validationTypes';
import { Config as RecaptchaConfig } from './useRecaptcha';

export interface Config<T extends Fields> {
  /** Required, the name of this form. Necessary for the use of IDs */
  name: string;

  /** Required, declares the fields of the form */
  fields: T;

  /** Optional, defines the form fields used for this form */
  fieldPack?: FieldPack;

  /** Optional, defines the global form validation mode. Defaults to `ValidationModes.AFTER_BLUR` */
  validationMode?: ValidationMode;

  /** Optional, adds a recaptcha check to the form */
  recaptcha?: RecaptchaConfig;

  /** Optional, the void function that fires on a form submission event */
  onSubmit?: (
    formValues: FormValues<T>,
    helpers: { recaptchaToken?: string },
  ) => void | Promise<void>;
}

export interface State {
  /** The form component generated by the hook */
  Form: () => ReactElement;
}

export default function useForm<T extends Fields>(
  config: Config<T>,
  deps?: DependencyList,
): State {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const FormComponent = useCallback(
    () => <Form {...config} {...{ isSubmitting, setIsSubmitting }} />,
    [config, deps],
  );

  return { Form: FormComponent };
}
